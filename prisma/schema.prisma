// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Wallet profile - primary identity for wallet-only authentication
model WalletProfile {
  id                     String       @id @default(uuid())
  walletAddress          String       @unique @map("wallet_address")
  blockchainType         String       @default("evm") @map("blockchain_type") // 'evm' or 'solana'
  isPrimary              Boolean      @default(true) @map("is_primary")
  isVerified             Boolean      @default(false) @map("is_verified")
  verificationSignature  String?      @map("verification_signature")
  firstSeen              DateTime     @default(now()) @map("first_seen")
  lastUpdated            DateTime     @default(now()) @updatedAt @map("last_updated")
  standaloneWallet       Boolean      @default(true) @map("standalone_wallet")
  displayName            String?      @map("display_name")
  avatarSeed             String?      @map("avatar_seed")
  preferences            Json         @default("{}") 
  activityLogs           ActivityLog[]
  cards                  PsychoCard[]

  @@map("wallet_profiles")
}

// Activity logs - tracks all wallet activities
model ActivityLog {
  id                     String        @id @default(uuid())
  walletAddress          String        @map("wallet_address")
  walletProfileId        String        @map("wallet_profile_id")
  walletProfile          WalletProfile @relation(fields: [walletProfileId], references: [id])
  activityType           String        @map("activity_type")
  details                Json          @default("{}") 
  timestamp              DateTime      @default(now())
  sessionId              String?       @map("session_id")
  ipAddress              String?       @map("ip_address")
  userAgent              String?       @map("user_agent")
  blockchainType         String        @default("evm") @map("blockchain_type")

  @@index([walletAddress])
  @@index([activityType])
  @@index([timestamp])
  @@map("activity_logs")
}

// Card data - stores calculation results
model PsychoCard {
  id                     String        @id @default(uuid())
  walletId               String
  wallet                 WalletProfile @relation(fields: [walletId], references: [id])
  cardType               String        // e.g., "fomo_score", "revenge_trading"
  value                  Json          // Flexible JSON structure for card data
  calculatedAt           DateTime      @default(now())

  @@unique([walletId, cardType])
  @@index([walletId, cardType])
  @@map("psycho_cards")
}
